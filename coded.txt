let reservationList = []

let currentDate = new Date();

function formatDate(date) {
    return date.toLocaleDateString('en-US', {
        weekday: 'short',
        day: 'numeric',
        month: 'short'
    }).toUpperCase();
}

function toLocalDateOnly(str) {
    const [y, m, d] = str.split("-").map(Number);
    return new Date(y, m - 1, d);
}

function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}

function getDateRange() {
    let smallestDate;
    let largestDate;

    reservationList.forEach(res => {
       if (!res.start || !res.end) return;

       let startDate = new Date(toLocalDateOnly(res.start).toString());
       let endDate = new Date(toLocalDateOnly(res.end).toString());

       if (!smallestDate || !largestDate) {
           smallestDate = startDate;
           largestDate = endDate;
           return;
       }

       if (startDate < smallestDate) {
           smallestDate = startDate;
       }
       if (endDate > largestDate) {
           largestDate = endDate;
       }
    });

    // Default range if no reservations
    if (!smallestDate || !largestDate) {
        smallestDate = new Date();
        largestDate = addDays(new Date(), 14);
    }

    const days = ((largestDate - smallestDate) / (1000 * 60 * 60 * 24)) + 1;

    return {
        startDate: smallestDate,
        endDate: largestDate,
        days
    };
}

function generateDateSlots() {
    let dateData = getDateRange();
    const slots = [];

    for (let i = 0; i < dateData.days; i++) {
        const d = addDays(dateData.startDate, i);
        slots.push({
            key: d.toISOString().split('T')[0],
            label: formatDate(d)
        });
    }
    return slots;
}

let dateSlots;

function buildHeaders(dateSlots){
    // Clear existing headers first (except the first one)
    const headerRow = document.getElementById("headerRow");
    const existingHeaders = headerRow.querySelectorAll("th:not(:first-child)");
    existingHeaders.forEach(th => th.remove());
    
    dateSlots.forEach(slot => {
        const th = document.createElement("th");
        th.textContent = slot.label;
        th.dataset.date = slot.key;
        headerRow.appendChild(th);
    });
}

class ReservationManager {
    constructor() {
        this.reservations = new Map();
    }

    addReservation(resourceId, startDate, endDate, guestName, status = 'occupied') {
        const startIndex = dateSlots.findIndex(s => s.key === startDate);
        const endIndex = dateSlots.findIndex(s => s.key === endDate);
        if (startIndex === -1 || endIndex === -1 || endIndex < startIndex) return;

        const row = document.querySelector(`[data-resource="${resourceId}"]`);
        
        if (!row) return;

        const grid = row.querySelector(".row-dates");
        if (!grid) return;

        const bar = document.createElement("div");
        bar.className = `reservation-bar status-${status}`;
        bar.textContent = guestName;
        bar.style.gridColumn = `${startIndex + 1} / ${endIndex + 2}`; // grid columns are 1-based
        bar.addEventListener("click", () => {
            const newName = prompt("Enter new guest name:", guestName);
            if (newName) bar.textContent = newName;
        });

        grid.appendChild(bar);
        const id = `res_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;
        this.reservations.set(id, {
            resourceId,
            startDate,
            endDate,
            guestName,
            element: bar
        });

        return id;
    }

    clearAll() {
        this.reservations.forEach(r => r.element.remove());
        this.reservations.clear();
    }

    addResource(name, id) {
        const tableBody = document.getElementById("tableBody");
        const tr = document.createElement("tr");
        tr.dataset.resource = id;

        const labelCell = document.createElement("td");
        labelCell.textContent = name;
        tr.appendChild(labelCell);

        const datesCell = document.createElement("td");
        datesCell.className = "dates-container";
        // IMPORTANT: Set colspan to the actual number of date slots
        datesCell.colSpan = dateSlots ? dateSlots.length : 0;

        const grid = document.createElement("div");
        grid.className = "row-dates";
        // IMPORTANT: Set the CSS custom property to match actual date slots
        grid.style.setProperty("--num-dates", dateSlots ? dateSlots.length : 0);

        if (dateSlots) {
            dateSlots.forEach(() => {
                const slot = document.createElement("div");
                grid.appendChild(slot);
            });
        }

        datesCell.appendChild(grid);
        tr.appendChild(datesCell);
        tableBody.appendChild(tr);
    }

    // Add method to rebuild all resources with correct column spans
    rebuildResources(spaces) {
        // Clear existing resources
        const tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = '';
        
        // Add resources with correct date slot count
        spaces.forEach(space => {
            this.addResource(space.name, space.name);
        });
    }
}

const reservationManager = new ReservationManager();

// Initialize resources
document.addEventListener('DOMContentLoaded', async function() {
    try {
        // Step 1: Fetch reservations first
        await fetch("/api/reservations", {
            method: "GET",
            headers: {"Content-Type": "application/json"}
        })
        .then(res => res.json())
        .then(data => {
            console.log('Reservations:', data);
            reservationList = data; // Replace the array completely
        });

        console.log('Loaded reservations:', reservationList);
        
        // Step 2: Generate date slots based on reservations
        dateSlots = generateDateSlots();
        console.log('Generated date slots:', dateSlots);
        
        // Step 3: Build headers with correct date slots
        buildHeaders(dateSlots);

        // Step 4: Fetch spaces
        let spaces = [];
        await fetch("/api/spaces", {
            method: "GET",
            headers: {"Content-Type": "application/json"}
        })
        .then(res => res.json())
        .then(data => {
            spaces = data;
            console.log('Spaces:', spaces);
        });
        
        // Step 5: Add resources with correct column structure
        spaces.forEach(space => {
            reservationManager.addResource(space.name, space.name);
        });
        
        // Step 6: Add reservations to the grid
        reservationList.forEach(res => {
            console.log('Adding reservation:', res);
            reservationManager.addReservation(res.space, res.start, res.end, res.name);
        });
        
    } catch (error) {
        console.error('Error loading data:', error);
        // Fallback: create default date range
        dateSlots = generateDateSlots();
        buildHeaders(dateSlots);
    }
});