// Sample data - replace with your actual data source
const siteData = [{
        name: "Site A1",
        reservations: [{
                start: '2025-08-26',
                end: '2025-08-28',
                status: 'occupied',
                guest: 'Smith'
            },
            {
                start: '2025-08-30',
                end: '2025-09-02',
                status: 'reserved',
                guest: 'Johnson'
            }
        ]
    },
    {
        name: "Site A2",
        reservations: [{
            start: '2025-08-27',
            end: '2025-08-29',
            status: 'occupied',
            guest: 'Brown'
        }, ]
    },
    {
        name: "Site B1",
        reservations: [{
            start: '2025-08-23',
            end: '2025-08-31',
            status: 'occupied',
            guest: 'Davis'
        }]
    },
    {
        name: "Site B2",
        reservations: [{
                start: '2025-08-28',
                end: '2025-09-01',
                status: 'reserved',
                guest: 'Wilson'
            },
            {
                start: '2025-09-05',
                end: '2025-09-11',
                status: 'blocked'
            }
        ]
    },
    {
        name: "Site C1",
        reservations: []
    },
];

let currentDate = new Date();



function formatDate(date) {
    return date.toISOString().split('T')[0];
}

function toLocalDateOnly(str) {
    const [y, m, d] = str.split("-").map(Number);
    return new Date(y, m - 1, d); // year, monthIndex, day
}


function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}

function getDateRange() {
    const today = new Date(currentDate);
    let startDate, endDate, days;

    // find earliest date
    let smallestDate;
    let largestDate;
    siteData.forEach(element => {
        element.reservations.forEach(res => {
            console.log(typeof res.end)
            if (!res.start || !res.end)
                return;

            let startDate = new Date(toLocalDateOnly(res.start).toString());
            let endDate = new Date(toLocalDateOnly(res.end).toString());
            if (!smallestDate || !largestDate) {
                smallestDate = startDate;
                largestDate = endDate
                return;
            }

            if (startDate < smallestDate) {
                smallestDate = startDate;
            }
            if (endDate > largestDate) {
                largestDate = endDate;
            }

        });
    });
    startDate = smallestDate;
    endDate = largestDate;
    days = ((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;

    return {
        startDate,
        endDate,
        days
    };
}


function isDateInRange(date, start, end) {
    const checkDate = new Date(date);
    const startDate = new Date(start);
    const endDate = new Date(end);
    return checkDate >= startDate && checkDate <= endDate;
}



async function loadSiteDate() {
    // load spaces
    await fetch("/api/spaces", {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then(res => res.json())
        .then(data => {
            console.log(data)
            data.forEach(space => {
                reservationManager.addResource(space.name, space.name)
            });
        })
    // load reservations

    await fetch("/api/reservations", {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then(res => res.json())
        .then(data => {
            console.log(data)
            data.forEach(res => {
                console.log(res)

                reservationManager.addReservation(res.space, res.start, res.end, res.name)
            });
        })


}


function formatDate(date) {
    return date.toLocaleDateString('en-US', {
        weekday: 'short',
        day: 'numeric',
        month: 'short'
    }).toUpperCase();
}

function toLocalDateOnly(str) {
    const [y, m, d] = str.split("-").map(Number);
    return new Date(y, m - 1, d);
}

function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}

function getDateRange() {
    let smallestDate;
    let largestDate;

    siteData.forEach(element => {
        element.reservations.forEach(res => {
            if (!res.start || !res.end) return;

            let startDate = new Date(toLocalDateOnly(res.start).toString());
            let endDate = new Date(toLocalDateOnly(res.end).toString());

            if (!smallestDate || !largestDate) {
                smallestDate = startDate;
                largestDate = endDate;
                return;
            }

            if (startDate < smallestDate) {
                smallestDate = startDate;
            }
            if (endDate > largestDate) {
                largestDate = endDate;
            }
        });
    });

    // Default range if no reservations
    if (!smallestDate || !largestDate) {
        smallestDate = new Date();
        largestDate = addDays(new Date(), 14);
    }

    const days = ((largestDate - smallestDate) / (1000 * 60 * 60 * 24)) + 1;

    return {
        startDate: smallestDate,
        endDate: largestDate,
        days
    };
}

function generateDateSlots() {
    let dateData = getDateRange();
    const slots = [];

    for (let i = 0; i < dateData.days; i++) {
        const d = addDays(dateData.startDate, i);
        slots.push({
            key: d.toISOString().split('T')[0],
            label: formatDate(d)
        });
    }
    return slots;
}

function isDateInRange(date, start, end) {
    const checkDate = new Date(date);
    const startDate = new Date(start);
    const endDate = new Date(end);
    return checkDate >= startDate && checkDate <= endDate;
}

// Generate date slots
const dateSlots = generateDateSlots();

// Build header
const headerRow = document.getElementById("headerRow");
dateSlots.forEach(slot => {
    const th = document.createElement("th");
    th.textContent = slot.label;
    th.dataset.date = slot.key;
    headerRow.appendChild(th);
});

class ReservationManager {
    constructor() {
        this.reservations = new Map();
    }

    addReservation(resourceId, startDate, endDate, guestName, status = 'occupied') {
        const startIndex = dateSlots.findIndex(s => s.key === startDate);
        const endIndex = dateSlots.findIndex(s => s.key === endDate);
        if (startIndex === -1 || endIndex === -1 || endIndex < startIndex) return;

        const row = document.querySelector(`[data-resource="${resourceId}"]`);
        if (!row) return;

        const grid = row.querySelector(".row-dates");
        if (!grid) return;

        const bar = document.createElement("div");
        bar.className = `reservation-bar status-${status}`;
        bar.textContent = guestName;
        bar.style.gridColumn = `${startIndex + 1} / ${endIndex + 2}`; // grid columns are 1-based
        bar.addEventListener("click", () => {
            const newName = prompt("Enter new guest name:", guestName);
            if (newName) bar.textContent = newName;
        });

        grid.appendChild(bar);
        const id = `res_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;
        this.reservations.set(id, {
            resourceId,
            startDate,
            endDate,
            guestName,
            element: bar
        });

        return id;
    }

    clearAll() {
        this.reservations.forEach(r => r.element.remove());
        this.reservations.clear();
    }

    addResource(name, id) {
        const tableBody = document.getElementById("tableBody");
        const tr = document.createElement("tr");
        tr.dataset.resource = id;

        const labelCell = document.createElement("td");
        labelCell.textContent = name;
        tr.appendChild(labelCell);

        const datesCell = document.createElement("td");
        datesCell.className = "dates-container";
        datesCell.colSpan = dateSlots.length;

        const grid = document.createElement("div");
        grid.className = "row-dates";
        grid.style.setProperty("--num-dates", dateSlots.length);

        dateSlots.forEach(() => {
            const slot = document.createElement("div");
            grid.appendChild(slot);
        });

        datesCell.appendChild(grid);
        tr.appendChild(datesCell);
        tableBody.appendChild(tr);
    }
}

const reservationManager = new ReservationManager();

// Button functions
function addSampleReservations() {
    // Load sample data
    siteData.forEach(site => {
        site.reservations.forEach(res => {
            reservationManager.addReservation(site.name, res.start, res.end, res.guest, res.status);
        });
    });
}

function clearAllReservations() {
    reservationManager.clearAll();
}

function addNewResource() {
    const name = prompt("Enter resource name:");
    if (!name) return;
    const id = name.toLowerCase().replace(/\s+/g, "-");
    reservationManager.addResource(name, id);
}

// Initialize resources
document.addEventListener('DOMContentLoaded', function() {
    siteData.forEach(site => {
        reservationManager.addResource(site.name, site.name);
    });

    // Auto-load reservations
    setTimeout(() => {
        addSampleReservations();
    }, 100);
});